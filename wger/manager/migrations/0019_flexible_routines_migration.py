# Generated by Django 4.2.6 on 2024-04-14 11:22

from django.db import migrations

from datetime import timedelta


def migrate_forward(apps, schema_editor):
    workouts_to_routines = migrate_routines(apps)
    migrate_logs(apps, workouts_to_routines)


def migrate_routines(apps):
    """
    Migrates all workouts to routines and the new data model
    """

    Workout = apps.get_model('manager', 'Workout')
    Routine = apps.get_model('manager', 'Routine')
    DayNg = apps.get_model('manager', 'DayNg')
    Slot = apps.get_model('manager', 'Slot')
    SlotConfig = apps.get_model('manager', 'SlotConfig')
    WeightConfig = apps.get_model('manager', 'WeightConfig')
    RepsConfig = apps.get_model('manager', 'RepsConfig')
    RiRConfig = apps.get_model('manager', 'RiRConfig')
    RestConfig = apps.get_model('manager', 'RestConfig')

    workouts_to_routines = {}

    for workout in Workout.objects.all():
        next_monday = workout.creation_date + timedelta(days=7 - workout.creation_date.weekday())

        routine = Routine(
            name=workout.name,
            description=workout.description,
            user=workout.user,
            created=workout.creation_date,
            start=next_monday,
            end=next_monday + timedelta(weeks=4 * 6),
            is_template=workout.is_template,
            is_public=workout.is_public,
        )
        routine.save()

        workouts_to_routines[workout.id] = routine

        day_dict = {}

        # To simulate a hard coded week, we will create exactly seven day entries (since
        # we know the routine starts on a monday).
        for i in range(1, 8):
            day_ng = DayNg(routine=routine, next_day=day_dict.get(i, None), is_rest=True)
            day_dict[i] = day_ng

            if i == 7:
                day_ng.next_day = day_dict[1]
            elif i != 1:
                day_dict[i - 1].next_day = day_dict[i]

            day = workout.day_set.filter(day__id=i).first()
            day_ng.save()
            if day:
                day_ng.description = day.description
                day_ng.is_rest = False
                day_ng.need_logs_to_advance = False
                day_ng.save()

                # Set the exercises and repetitions
                # TODO: properly handle number of sets
                for set in day.set_set.all():
                    slot = Slot(day=day_ng, comment=set.comment, order=set.order)
                    slot.save()
                    for setting in set.setting_set.all():
                        slot_config = SlotConfig(
                            slot=slot,
                            exercise=setting.exercise_base,
                            repetition_unit=setting.repetition_unit,
                            weight_unit=setting.weight_unit,
                            order=setting.order,
                            comment=setting.comment,
                        )
                        slot_config.save()

                        if setting.weight:
                            WeightConfig(
                                slot_config=slot_config,
                                value=setting.weight,
                                iteration=1,
                                replace=True,
                            ).save()

                        if setting.reps:
                            RepsConfig(
                                slot_config=slot_config,
                                value=setting.reps,
                                iteration=1,
                                replace=True,
                            ).save()

                        if setting.rir:
                            RiRConfig(
                                slot_config=slot_config,
                                value=setting.rir,
                                iteration=1,
                                replace=True,
                            ).save()

                        RestConfig(
                            slot_config=slot_config,
                            value=120,
                            iteration=1,
                            replace=True,
                        ).save()

        routine.first_day = day_dict[1]
        routine.save()
    return workouts_to_routines


def migrate_logs(apps, workout_to_routine):
    """
    Migrates all logs to the new data model (basically setting the routine and session)
    """

    Log = apps.get_model('manager', 'WorkoutLog')
    Session = apps.get_model('manager', 'WorkoutSession')

    session_dict = {}

    for log in Log.objects.all():
        session = session_dict.get(log.date, None)
        if not session:
            session, created = Session.objects.get_or_create(
                user=log.user,
                date=log.date.date(),
                defaults={
                    'workout': log.workout,
                    'routine': workout_to_routine[log.workout.id],
                },
            )
            session_dict[log.date] = session

        log.routine = workout_to_routine[log.workout.id]
        log.session = session
        log.save()


class Migration(migrations.Migration):
    dependencies = [
        ('manager', '0018_flexible_routines'),
    ]

    operations = [
        migrations.RunPython(migrate_forward, reverse_code=migrations.RunPython.noop),
    ]
